-- AmberFawn Plugin Highlights
-- Plugin-specific highlights for the AmberFawn colorscheme
-- Author: Generated for Neovim
-- License: MIT

local M = {}

-- Apply plugin-specific highlights using the provided palette and highlight function
function M.setup(colors, hl)
    -- Telescope
    hl('TelescopeNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('TelescopeBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('TelescopeTitle', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('TelescopePromptNormal', { fg = colors.fg, bg = colors.bg_highlight })
    hl('TelescopePromptBorder', { fg = colors.amber, bg = colors.bg_highlight })
    hl('TelescopePromptTitle', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('TelescopePromptPrefix', { fg = colors.amber })
    hl('TelescopePreviewNormal', { fg = colors.fg, bg = colors.bg_alt })
    hl('TelescopePreviewBorder', { fg = colors.green, bg = colors.bg_alt })
    hl('TelescopePreviewTitle', { fg = colors.bg, bg = colors.green, bold = true })
    hl('TelescopeResultsNormal', { fg = colors.fg, bg = colors.bg_alt })
    hl('TelescopeResultsBorder', { fg = colors.blue, bg = colors.bg_alt })
    hl('TelescopeResultsTitle', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('TelescopeSelection', { fg = colors.fg, bg = colors.bg_visual })
    hl('TelescopeSelectionCaret', { fg = colors.amber })
    hl('TelescopeMultiSelection', { fg = colors.amber })
    hl('TelescopeMatching', { fg = colors.amber, bold = true })

    -- NvimTree
    hl('NvimTreeNormal', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('NvimTreeWinSeparator', { fg = colors.gray_dark, bg = colors.bg_sidebar })
    hl('NvimTreeEndOfBuffer', { fg = colors.bg_sidebar, bg = colors.bg_sidebar })
    hl('NvimTreeRootFolder', { fg = colors.amber, bold = true })
    hl('NvimTreeFolderName', { fg = colors.fawn })
    hl('NvimTreeFolderIcon', { fg = colors.fawn })
    hl('NvimTreeOpenedFolderName', { fg = colors.fawn_light, bold = true })
    hl('NvimTreeEmptyFolderName', { fg = colors.gray })
    hl('NvimTreeIndentMarker', { fg = colors.gray_dark })
    hl('NvimTreeImageFile', { fg = colors.purple })
    hl('NvimTreeSpecialFile', { fg = colors.orange, underline = true })
    hl('NvimTreeExecFile', { fg = colors.green })
    hl('NvimTreeSymlink', { fg = colors.cyan })
    hl('NvimTreeGitDirty', { fg = colors.orange })
    hl('NvimTreeGitStaged', { fg = colors.green })
    hl('NvimTreeGitMerge', { fg = colors.purple })
    hl('NvimTreeGitRenamed', { fg = colors.purple })
    hl('NvimTreeGitNew', { fg = colors.green })
    hl('NvimTreeGitDeleted', { fg = colors.red })
    hl('NvimTreeGitIgnored', { fg = colors.gray })

    -- Neo-tree
    hl('NeoTreeNormal', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('NeoTreeNormalNC', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('NeoTreeWinSeparator', { fg = colors.gray_dark, bg = colors.bg_sidebar })
    hl('NeoTreeEndOfBuffer', { fg = colors.bg_sidebar, bg = colors.bg_sidebar })
    hl('NeoTreeRootName', { fg = colors.amber, bold = true })
    hl('NeoTreeDirectoryName', { fg = colors.fawn })
    hl('NeoTreeDirectoryIcon', { fg = colors.fawn })
    hl('NeoTreeFileIcon', { fg = colors.gray_light })
    hl('NeoTreeFileName', { fg = colors.fg })
    hl('NeoTreeIndentMarker', { fg = colors.gray_dark })
    hl('NeoTreeExpander', { fg = colors.gray })
    hl('NeoTreeGitAdded', { fg = colors.green })
    hl('NeoTreeGitConflict', { fg = colors.red })
    hl('NeoTreeGitDeleted', { fg = colors.red })
    hl('NeoTreeGitIgnored', { fg = colors.gray })
    hl('NeoTreeGitModified', { fg = colors.orange })
    hl('NeoTreeGitUnstaged', { fg = colors.orange })
    hl('NeoTreeGitUntracked', { fg = colors.green })
    hl('NeoTreeGitStaged', { fg = colors.green })

    -- Which-key
    hl('WhichKey', { fg = colors.amber, bold = true })
    hl('WhichKeyGroup', { fg = colors.blue })
    hl('WhichKeyDesc', { fg = colors.fawn })
    hl('WhichKeySeperator', { fg = colors.gray })
    hl('WhichKeyFloat', { bg = colors.bg_float })
    hl('WhichKeyBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('WhichKeyValue', { fg = colors.gray_light })

    -- Indent Blankline
    hl('IndentBlanklineChar', { fg = colors.gray_dark })
    hl('IndentBlanklineContextChar', { fg = colors.fawn })
    hl('IndentBlanklineContextStart', { sp = colors.fawn, underline = true })
    hl('IndentBlanklineSpaceChar', { fg = colors.gray_dark })
    hl('IndentBlanklineSpaceCharBlankline', { fg = colors.gray_dark })

    -- Indent Blankline v3 (new names)
    hl('IblIndent', { fg = colors.gray_dark })
    hl('IblWhitespace', { fg = colors.gray_dark })
    hl('IblScope', { fg = colors.fawn })

    -- BufferLine
    hl('BufferLineFill', { bg = colors.bg_alt })
    hl('BufferLineBackground', { fg = colors.gray, bg = colors.bg_alt })
    hl('BufferLineBuffer', { fg = colors.gray, bg = colors.bg_alt })
    hl('BufferLineBufferSelected', { fg = colors.fg, bg = colors.bg, bold = true })
    hl('BufferLineBufferVisible', { fg = colors.fg, bg = colors.bg_highlight })
    hl('BufferLineCloseButton', { fg = colors.gray, bg = colors.bg_alt })
    hl('BufferLineCloseButtonSelected', { fg = colors.red, bg = colors.bg })
    hl('BufferLineCloseButtonVisible', { fg = colors.gray, bg = colors.bg_highlight })
    hl('BufferLineIndicatorSelected', { fg = colors.amber, bg = colors.bg })
    hl('BufferLineIndicatorVisible', { fg = colors.fawn, bg = colors.bg_highlight })
    hl('BufferLineModified', { fg = colors.orange, bg = colors.bg_alt })
    hl('BufferLineModifiedSelected', { fg = colors.orange, bg = colors.bg })
    hl('BufferLineModifiedVisible', { fg = colors.orange, bg = colors.bg_highlight })
    hl('BufferLineSeparator', { fg = colors.gray_dark, bg = colors.bg_alt })
    hl('BufferLineSeparatorSelected', { fg = colors.gray_dark, bg = colors.bg })
    hl('BufferLineSeparatorVisible', { fg = colors.gray_dark, bg = colors.bg_highlight })
    hl('BufferLineTab', { fg = colors.gray, bg = colors.bg_alt })
    hl('BufferLineTabSelected', { fg = colors.fg, bg = colors.bg })
    hl('BufferLineTabClose', { fg = colors.red, bg = colors.bg_alt })
    hl('BufferLineDuplicate', { fg = colors.gray, bg = colors.bg_alt, italic = true })
    hl('BufferLineDuplicateSelected', { fg = colors.fg, bg = colors.bg, italic = true })
    hl('BufferLineDuplicateVisible', { fg = colors.fg, bg = colors.bg_highlight, italic = true })

    -- Lualine
    hl('lualine_a_normal', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('lualine_a_insert', { fg = colors.bg, bg = colors.green, bold = true })
    hl('lualine_a_visual', { fg = colors.bg, bg = colors.purple, bold = true })
    hl('lualine_a_replace', { fg = colors.bg, bg = colors.red, bold = true })
    hl('lualine_a_command', { fg = colors.bg, bg = colors.orange, bold = true })
    hl('lualine_b_normal', { fg = colors.fg, bg = colors.bg_highlight })
    hl('lualine_c_normal', { fg = colors.gray_light, bg = colors.bg_alt })

    -- Git signs
    hl('GitSignsAdd', { fg = colors.green })
    hl('GitSignsChange', { fg = colors.orange })
    hl('GitSignsDelete', { fg = colors.red })
    hl('GitSignsAddNr', { fg = colors.green })
    hl('GitSignsChangeNr', { fg = colors.orange })
    hl('GitSignsDeleteNr', { fg = colors.red })
    hl('GitSignsAddLn', { bg = colors.green, fg = colors.bg })
    hl('GitSignsChangeLn', { bg = colors.orange, fg = colors.bg })
    hl('GitSignsDeleteLn', { bg = colors.red, fg = colors.bg })

    -- Diff
    hl('DiffAdd', { bg = colors.green, fg = colors.bg })
    hl('DiffChange', { bg = colors.orange, fg = colors.bg })
    hl('DiffDelete', { bg = colors.red, fg = colors.bg })
    hl('DiffText', { bg = colors.orange_bright, fg = colors.bg })
    hl('diffAdded', { fg = colors.green })
    hl('diffRemoved', { fg = colors.red })
    hl('diffChanged', { fg = colors.orange })
    hl('diffOldFile', { fg = colors.red })
    hl('diffNewFile', { fg = colors.green })
    hl('diffFile', { fg = colors.blue })
    hl('diffLine', { fg = colors.gray })
    hl('diffIndexLine', { fg = colors.purple })

    -- Notify
    hl('NotifyERRORBorder', { fg = colors.red })
    hl('NotifyWARNBorder', { fg = colors.orange })
    hl('NotifyINFOBorder', { fg = colors.blue })
    hl('NotifyDEBUGBorder', { fg = colors.gray })
    hl('NotifyTRACEBorder', { fg = colors.purple })
    hl('NotifyERRORIcon', { fg = colors.red })
    hl('NotifyWARNIcon', { fg = colors.orange })
    hl('NotifyINFOIcon', { fg = colors.blue })
    hl('NotifyDEBUGIcon', { fg = colors.gray })
    hl('NotifyTRACEIcon', { fg = colors.purple })
    hl('NotifyERRORTitle', { fg = colors.red })
    hl('NotifyWARNTitle', { fg = colors.orange })
    hl('NotifyINFOTitle', { fg = colors.blue })
    hl('NotifyDEBUGTitle', { fg = colors.gray })
    hl('NotifyTRACETitle', { fg = colors.purple })
    hl('NotifyERRORBody', { fg = colors.fg, bg = colors.bg_float })
    hl('NotifyWARNBody', { fg = colors.fg, bg = colors.bg_float })
    hl('NotifyINFOBody', { fg = colors.fg, bg = colors.bg_float })
    hl('NotifyDEBUGBody', { fg = colors.fg, bg = colors.bg_float })
    hl('NotifyTRACEBody', { fg = colors.fg, bg = colors.bg_float })

    -- Dashboard (alpha-nvim)
    hl('AlphaShortcut', { fg = colors.amber, bold = true })
    hl('AlphaHeader', { fg = colors.fawn })
    hl('AlphaHeaderLabel', { fg = colors.orange })
    hl('AlphaFooter', { fg = colors.gray, italic = true })
    hl('AlphaButtons', { fg = colors.blue })

    -- Dashboard (dashboard-nvim)
    hl('DashboardShortCut', { fg = colors.amber, bold = true })
    hl('DashboardHeader', { fg = colors.fawn })
    hl('DashboardCenter', { fg = colors.blue })
    hl('DashboardFooter', { fg = colors.gray, italic = true })

    -- Lazy.nvim
    hl('LazyH1', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('LazyH2', { fg = colors.amber, bold = true, underline = true })
    hl('LazyButton', { fg = colors.fg, bg = colors.bg_highlight })
    hl('LazyButtonActive', { fg = colors.bg, bg = colors.amber })
    hl('LazyComment', { fg = colors.gray, italic = true })
    hl('LazyCommit', { fg = colors.green })
    hl('LazyCommitIssue', { fg = colors.orange })
    hl('LazyCommitScope', { fg = colors.blue })
    hl('LazyCommitType', { fg = colors.purple })
    hl('LazyDimmed', { fg = colors.gray })
    hl('LazyDir', { fg = colors.fawn })
    hl('LazyLocal', { fg = colors.cyan })
    hl('LazyNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('LazyProgressDone', { fg = colors.green })
    hl('LazyProgressTodo', { fg = colors.gray_dark })
    hl('LazyProp', { fg = colors.fawn })
    hl('LazyReasonCmd', { fg = colors.orange })
    hl('LazyReasonEvent', { fg = colors.green })
    hl('LazyReasonFt', { fg = colors.purple })
    hl('LazyReasonImport', { fg = colors.blue })
    hl('LazyReasonKeys', { fg = colors.cyan })
    hl('LazyReasonPlugin', { fg = colors.gray_light })
    hl('LazyReasonRuntime', { fg = colors.yellow })
    hl('LazyReasonSource', { fg = colors.fawn })
    hl('LazyReasonStart', { fg = colors.amber })
    hl('LazySpecial', { fg = colors.cyan })
    hl('LazyTaskError', { fg = colors.red })
    hl('LazyTaskOutput', { fg = colors.fg })
    hl('LazyUrl', { fg = colors.blue, underline = true })
    hl('LazyValue', { fg = colors.orange })

    -- Mason
    hl('MasonHeader', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MasonHeaderSecondary', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('MasonHighlight', { fg = colors.amber })
    hl('MasonHighlightBlock', { fg = colors.bg, bg = colors.amber })
    hl('MasonHighlightBlockBold', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MasonHighlightSecondary', { fg = colors.blue })
    hl('MasonHighlightBlockSecondary', { fg = colors.bg, bg = colors.blue })
    hl('MasonHighlightBlockBoldSecondary', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('MasonMuted', { fg = colors.gray })
    hl('MasonMutedBlock', { fg = colors.gray, bg = colors.bg_alt })
    hl('MasonMutedBlockBold', { fg = colors.gray, bg = colors.bg_alt, bold = true })

    -- Trouble
    hl('TroubleText', { fg = colors.fg })
    hl('TroubleCount', { fg = colors.purple, bg = colors.bg_alt })
    hl('TroubleNormal', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('TroubleTextInformation', { fg = colors.blue })
    hl('TroubleTextWarning', { fg = colors.orange })
    hl('TroubleTextError', { fg = colors.red })
    hl('TroubleTextHint', { fg = colors.gray_light })
    hl('TroubleIndent', { fg = colors.gray_dark })
    hl('TroubleLocation', { fg = colors.gray })

    -- Noice
    hl('NoicePopup', { fg = colors.fg, bg = colors.bg_float })
    hl('NoicePopupBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('NoiceCmdlinePopup', { fg = colors.fg, bg = colors.bg_highlight })
    hl('NoiceCmdlinePopupBorder', { fg = colors.amber, bg = colors.bg_highlight })
    hl('NoiceCmdlineIcon', { fg = colors.amber })
    hl('NoiceConfirm', { fg = colors.fg, bg = colors.bg_float })
    hl('NoiceConfirmBorder', { fg = colors.blue, bg = colors.bg_float })

    -- Flash
    hl('FlashBackdrop', { fg = colors.gray })
    hl('FlashMatch', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('FlashCurrent', { fg = colors.bg, bg = colors.orange, bold = true })
    hl('FlashLabel', { fg = colors.bg, bg = colors.red, bold = true })
    hl('FlashPrompt', { fg = colors.fg, bg = colors.bg_highlight })
    hl('FlashPromptIcon', { fg = colors.amber })

    -- Leap
    hl('LeapMatch', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('LeapLabelPrimary', { fg = colors.bg, bg = colors.red, bold = true })
    hl('LeapLabelSecondary', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('LeapBackdrop', { fg = colors.gray })

    -- Hop
    hl('HopNextKey', { fg = colors.bg, bg = colors.red, bold = true })
    hl('HopNextKey1', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('HopNextKey2', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('HopUnmatched', { fg = colors.gray })

    -- Mini.nvim
    hl('MiniAnimateCursor', { reverse = true })
    hl('MiniAnimateNormalFloat', { fg = colors.fg, bg = colors.bg_float })
    hl('MiniClueBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('MiniClueDescGroup', { fg = colors.blue })
    hl('MiniClueDescSingle', { fg = colors.fawn })
    hl('MiniClueNextKey', { fg = colors.amber, bold = true })
    hl('MiniClueNextKeyWithPostkeys', { fg = colors.orange, bold = true })
    hl('MiniClueSeparator', { fg = colors.gray })
    hl('MiniClueTitle', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniCompletionActiveParameter', { underline = true })
    hl('MiniCursorword', { bg = colors.bg_visual })
    hl('MiniCursorwordCurrent', { bg = colors.bg_visual })
    hl('MiniDepsChangeAdded', { fg = colors.green })
    hl('MiniDepsChangeRemoved', { fg = colors.red })
    hl('MiniDepsHint', { fg = colors.gray_light })
    hl('MiniDepsInfo', { fg = colors.blue })
    hl('MiniDepsMsgBreaking', { fg = colors.red, bold = true })
    hl('MiniDepsPlaceholder', { fg = colors.gray })
    hl('MiniDepsTitle', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniDepsTitleError', { fg = colors.bg, bg = colors.red, bold = true })
    hl('MiniDepsTitleSame', { fg = colors.bg, bg = colors.gray, bold = true })
    hl('MiniDepsTitleUpdate', { fg = colors.bg, bg = colors.green, bold = true })
    hl('MiniDiffSignAdd', { fg = colors.green })
    hl('MiniDiffSignChange', { fg = colors.orange })
    hl('MiniDiffSignDelete', { fg = colors.red })
    hl('MiniDiffOverAdd', { bg = colors.green, fg = colors.bg })
    hl('MiniDiffOverChange', { bg = colors.orange, fg = colors.bg })
    hl('MiniDiffOverContext', { bg = colors.bg_alt })
    hl('MiniDiffOverDelete', { bg = colors.red, fg = colors.bg })
    hl('MiniFilesBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('MiniFilesBorderModified', { fg = colors.orange, bg = colors.bg_float })
    hl('MiniFilesCursorLine', { bg = colors.bg_visual })
    hl('MiniFilesDirectory', { fg = colors.fawn })
    hl('MiniFilesFile', { fg = colors.fg })
    hl('MiniFilesNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('MiniFilesTitle', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniFilesTitleFocused', { fg = colors.bg, bg = colors.green, bold = true })
    hl('MiniHipatternsFixme', { fg = colors.bg, bg = colors.red, bold = true })
    hl('MiniHipatternsHack', { fg = colors.bg, bg = colors.orange, bold = true })
    hl('MiniHipatternsNote', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('MiniHipatternsTodo', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniIconsAzure', { fg = colors.blue })
    hl('MiniIconsBlue', { fg = colors.blue })
    hl('MiniIconsCyan', { fg = colors.cyan })
    hl('MiniIconsGreen', { fg = colors.green })
    hl('MiniIconsGrey', { fg = colors.gray })
    hl('MiniIconsOrange', { fg = colors.orange })
    hl('MiniIconsPurple', { fg = colors.purple })
    hl('MiniIconsRed', { fg = colors.red })
    hl('MiniIconsYellow', { fg = colors.yellow })
    hl('MiniIndentscopeSymbol', { fg = colors.fawn })
    hl('MiniJump', { fg = colors.bg, bg = colors.amber })
    hl('MiniJump2dSpot', { fg = colors.bg, bg = colors.red, bold = true })
    hl('MiniJump2dSpotAhead', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('MiniJump2dSpotUnique', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniMapNormal', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('MiniMapSymbolCount', { fg = colors.orange })
    hl('MiniMapSymbolLine', { fg = colors.blue })
    hl('MiniMapSymbolView', { fg = colors.green })
    hl('MiniNotifyBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('MiniNotifyNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('MiniNotifyTitle', { fg = colors.amber, bold = true })
    hl('MiniOperatorsExchangeFrom', { bg = colors.bg_visual })
    hl('MiniPickBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('MiniPickBorderBusy', { fg = colors.orange, bg = colors.bg_float })
    hl('MiniPickBorderText', { fg = colors.cyan, bg = colors.bg_float })
    hl('MiniPickIconDirectory', { fg = colors.fawn })
    hl('MiniPickIconFile', { fg = colors.fg })
    hl('MiniPickHeader', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniPickMatchCurrent', { bg = colors.bg_visual })
    hl('MiniPickMatchMarked', { fg = colors.amber, bold = true })
    hl('MiniPickMatchRanges', { fg = colors.amber, bold = true })
    hl('MiniPickNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('MiniPickPreviewLine', { bg = colors.bg_visual })
    hl('MiniPickPreviewRegion', { bg = colors.bg_highlight })
    hl('MiniPickPrompt', { fg = colors.amber, bg = colors.bg_float })
    hl('MiniStarterCurrent', { bg = colors.bg_visual })
    hl('MiniStarterFooter', { fg = colors.gray, italic = true })
    hl('MiniStarterHeader', { fg = colors.amber, bold = true })
    hl('MiniStarterInactive', { fg = colors.gray })
    hl('MiniStarterItem', { fg = colors.fg })
    hl('MiniStarterItemBullet', { fg = colors.fawn })
    hl('MiniStarterItemPrefix', { fg = colors.orange })
    hl('MiniStarterSection', { fg = colors.blue, bold = true })
    hl('MiniStarterQuery', { fg = colors.green })
    hl('MiniStatuslineDevinfo', { fg = colors.gray_light, bg = colors.bg_alt })
    hl('MiniStatuslineFileinfo', { fg = colors.gray_light, bg = colors.bg_alt })
    hl('MiniStatuslineFilename', { fg = colors.fg, bg = colors.bg_alt })
    hl('MiniStatuslineInactive', { fg = colors.gray, bg = colors.bg_alt })
    hl('MiniStatuslineModeCommand', { fg = colors.bg, bg = colors.orange, bold = true })
    hl('MiniStatuslineModeInsert', { fg = colors.bg, bg = colors.green, bold = true })
    hl('MiniStatuslineModeNormal', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniStatuslineModeOther', { fg = colors.bg, bg = colors.cyan, bold = true })
    hl('MiniStatuslineModeReplace', { fg = colors.bg, bg = colors.red, bold = true })
    hl('MiniStatuslineModeVisual', { fg = colors.bg, bg = colors.purple, bold = true })
    hl('MiniSurround', { bg = colors.bg_visual })
    hl('MiniTablineCurrent', { fg = colors.fg, bg = colors.bg, bold = true })
    hl('MiniTablineFill', { bg = colors.bg_alt })
    hl('MiniTablineHidden', { fg = colors.gray, bg = colors.bg_alt })
    hl('MiniTablineModifiedCurrent', { fg = colors.orange, bg = colors.bg, bold = true })
    hl('MiniTablineModifiedHidden', { fg = colors.orange, bg = colors.bg_alt })
    hl('MiniTablineModifiedVisible', { fg = colors.orange, bg = colors.bg_highlight })
    hl('MiniTablineTabpagesection', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('MiniTablineVisible', { fg = colors.fg, bg = colors.bg_highlight })
    hl('MiniTestEmphasis', { bold = true })
    hl('MiniTestFail', { fg = colors.red, bold = true })
    hl('MiniTestPass', { fg = colors.green, bold = true })
    hl('MiniTrailspace', { bg = colors.red })

    -- Cmp (nvim-cmp)
    hl('CmpItemAbbr', { fg = colors.fg })
    hl('CmpItemAbbrDeprecated', { fg = colors.gray, strikethrough = true })
    hl('CmpItemAbbrMatch', { fg = colors.amber, bold = true })
    hl('CmpItemAbbrMatchFuzzy', { fg = colors.amber })
    hl('CmpItemKind', { fg = colors.purple })
    hl('CmpItemKindClass', { fg = colors.cyan })
    hl('CmpItemKindColor', { fg = colors.orange })
    hl('CmpItemKindConstant', { fg = colors.orange })
    hl('CmpItemKindConstructor', { fg = colors.cyan })
    hl('CmpItemKindEnum', { fg = colors.cyan })
    hl('CmpItemKindEnumMember', { fg = colors.orange })
    hl('CmpItemKindEvent', { fg = colors.purple })
    hl('CmpItemKindField', { fg = colors.fawn })
    hl('CmpItemKindFile', { fg = colors.fg })
    hl('CmpItemKindFolder', { fg = colors.fawn })
    hl('CmpItemKindFunction', { fg = colors.blue })
    hl('CmpItemKindInterface', { fg = colors.cyan })
    hl('CmpItemKindKeyword', { fg = colors.amber })
    hl('CmpItemKindMethod', { fg = colors.blue })
    hl('CmpItemKindModule', { fg = colors.cyan })
    hl('CmpItemKindOperator', { fg = colors.fawn })
    hl('CmpItemKindProperty', { fg = colors.fawn })
    hl('CmpItemKindReference', { fg = colors.blue })
    hl('CmpItemKindSnippet', { fg = colors.green })
    hl('CmpItemKindStruct', { fg = colors.cyan })
    hl('CmpItemKindText', { fg = colors.fg })
    hl('CmpItemKindTypeParameter', { fg = colors.cyan })
    hl('CmpItemKindUnit', { fg = colors.orange })
    hl('CmpItemKindValue', { fg = colors.orange })
    hl('CmpItemKindVariable', { fg = colors.fg })
    hl('CmpItemMenu', { fg = colors.gray })
    hl('CmpDocumentation', { fg = colors.fg, bg = colors.bg_float })
    hl('CmpDocumentationBorder', { fg = colors.fawn, bg = colors.bg_float })

    -- Aerial
    hl('AerialNormal', { fg = colors.fg, bg = colors.bg_sidebar })
    hl('AerialBorder', { fg = colors.fawn, bg = colors.bg_sidebar })
    hl('AerialLine', { bg = colors.bg_visual })
    hl('AerialLineNC', { bg = colors.bg_highlight })
    hl('AerialGuide', { fg = colors.gray_dark })

    -- Symbols Outline
    hl('SymbolsOutlineConnector', { fg = colors.gray_dark })
    hl('FocusedSymbol', { bg = colors.bg_visual })

    -- Neotest
    hl('NeotestPassed', { fg = colors.green })
    hl('NeotestRunning', { fg = colors.orange })
    hl('NeotestFailed', { fg = colors.red })
    hl('NeotestSkipped', { fg = colors.gray })
    hl('NeotestTest', { fg = colors.fg })
    hl('NeotestNamespace', { fg = colors.cyan })
    hl('NeotestFocused', { bold = true })
    hl('NeotestFile', { fg = colors.fawn })
    hl('NeotestDir', { fg = colors.fawn })
    hl('NeotestBorder', { fg = colors.fawn })
    hl('NeotestIndent', { fg = colors.gray_dark })
    hl('NeotestExpandMarker', { fg = colors.gray })
    hl('NeotestAdapterName', { fg = colors.purple, bold = true })
    hl('NeotestWinSelect', { fg = colors.amber, bold = true })
    hl('NeotestMarked', { fg = colors.amber, bold = true })
    hl('NeotestTarget', { fg = colors.red })

    -- DAP (Debug Adapter Protocol)
    hl('DapStoppedLine', { bg = colors.bg_visual })
    hl('DapBreakpoint', { fg = colors.red })
    hl('DapBreakpointCondition', { fg = colors.orange })
    hl('DapBreakpointRejected', { fg = colors.gray })
    hl('DapLogPoint', { fg = colors.blue })

    -- Fidget
    hl('FidgetTitle', { fg = colors.amber, bold = true })
    hl('FidgetTask', { fg = colors.fg })

    -- Outline
    hl('OutlineGuides', { fg = colors.gray_dark })
    hl('OutlineCurrent', { bg = colors.bg_visual })

    -- Navic
    hl('NavicIconsFile', { fg = colors.fg })
    hl('NavicIconsModule', { fg = colors.cyan })
    hl('NavicIconsNamespace', { fg = colors.cyan })
    hl('NavicIconsPackage', { fg = colors.cyan })
    hl('NavicIconsClass', { fg = colors.cyan })
    hl('NavicIconsMethod', { fg = colors.blue })
    hl('NavicIconsProperty', { fg = colors.fawn })
    hl('NavicIconsField', { fg = colors.fawn })
    hl('NavicIconsConstructor', { fg = colors.cyan })
    hl('NavicIconsEnum', { fg = colors.cyan })
    hl('NavicIconsInterface', { fg = colors.cyan })
    hl('NavicIconsFunction', { fg = colors.blue })
    hl('NavicIconsVariable', { fg = colors.fg })
    hl('NavicIconsConstant', { fg = colors.orange })
    hl('NavicIconsString', { fg = colors.green })
    hl('NavicIconsNumber', { fg = colors.orange })
    hl('NavicIconsBoolean', { fg = colors.orange })
    hl('NavicIconsArray', { fg = colors.fg })
    hl('NavicIconsObject', { fg = colors.fg })
    hl('NavicIconsKey', { fg = colors.fawn })
    hl('NavicIconsNull', { fg = colors.gray })
    hl('NavicIconsEnumMember', { fg = colors.orange })
    hl('NavicIconsStruct', { fg = colors.cyan })
    hl('NavicIconsEvent', { fg = colors.purple })
    hl('NavicIconsOperator', { fg = colors.fawn })
    hl('NavicIconsTypeParameter', { fg = colors.cyan })
    hl('NavicText', { fg = colors.fg })
    hl('NavicSeparator', { fg = colors.gray })

    -- Glow (markdown preview)
    hl('GlowWinSeparator', { fg = colors.gray_dark, bg = colors.bg_float })
    hl('GlowBorder', { fg = colors.fawn, bg = colors.bg_float })

    -- ToggleTerm
    hl('ToggleTerm1FloatBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('ToggleTermNormal', { fg = colors.fg, bg = colors.bg_float })
    hl('ToggleTermBorder', { fg = colors.fawn, bg = colors.bg_float })

    -- Zen Mode
    hl('ZenBg', { bg = colors.bg })

    -- Twilight
    hl('TwilightInactive', { fg = colors.gray })

    -- nvim-surround
    hl('NvimSurroundHighlight', { bg = colors.bg_visual })

    -- Lightspeed/Lightbulb
    hl('LightspeedGreyWash', { fg = colors.gray })
    hl('LightspeedLabel', { fg = colors.bg, bg = colors.red, bold = true })
    hl('LightspeedLabelDistant', { fg = colors.bg, bg = colors.blue, bold = true })
    hl('LightspeedShortcut', { fg = colors.bg, bg = colors.amber, bold = true })
    hl('LightspeedUnlabeledMatch', { fg = colors.orange, bold = true })
    hl('LightspeedMaskedChar', { fg = colors.gray })
    hl('LightspeedOneCharMatch', { fg = colors.bg, bg = colors.green, bold = true })
    hl('LightspeedPendingOpArea', { bg = colors.bg_visual })
    hl('LightspeedCursor', { reverse = true })

    -- Wilder.nvim
    hl('WilderMenu', { fg = colors.fg, bg = colors.bg_float })
    hl('WilderBorder', { fg = colors.fawn, bg = colors.bg_float })
    hl('WilderIndex', { fg = colors.amber, bold = true })
    hl('WilderAccent', { fg = colors.amber, bold = true })

    -- Copilot
    hl('CopilotSuggestion', { fg = colors.gray, italic = true })
    hl('CopilotAnnotation', { fg = colors.gray, italic = true })

    -- Rainbow Delimiters
    hl('RainbowDelimiterRed', { fg = colors.red })
    hl('RainbowDelimiterYellow', { fg = colors.yellow })
    hl('RainbowDelimiterBlue', { fg = colors.blue })
    hl('RainbowDelimiterOrange', { fg = colors.orange })
    hl('RainbowDelimiterGreen', { fg = colors.green })
    hl('RainbowDelimiterViolet', { fg = colors.purple })
    hl('RainbowDelimiterCyan', { fg = colors.cyan })

    -- Overseer
    hl('OverseerPENDING', { fg = colors.orange })
    hl('OverseerRUNNING', { fg = colors.blue })
    hl('OverseerSUCCESS', { fg = colors.green })
    hl('OverseerCANCELED', { fg = colors.gray })
    hl('OverseerFAILURE', { fg = colors.red })
    hl('OverseerTask', { fg = colors.fg })
    hl('OverseerComponent', { fg = colors.fawn })
    hl('OverseerTaskBorder', { fg = colors.fawn, bg = colors.bg_float })
end

return M
